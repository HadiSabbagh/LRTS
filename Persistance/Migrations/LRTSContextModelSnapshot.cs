// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistance.Context;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(LRTSContext))]
    partial class LRTSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Domain.Entities.Desk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.Property<int>("DeskCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("DeskStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("integer");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("FloorId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Desks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Desk");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("Domain.Entities.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeskId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Entities.Scanner", b =>
                {
                    b.Property<int>("ScannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScannerId"));

                    b.HasKey("ScannerId");

                    b.ToTable("Scanners");
                });

            modelBuilder.Entity("Domain.Entities.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupDeskId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasAccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("integer");

                    b.Property<int>("UniId")
                        .HasColumnType("integer");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("integer");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupDeskId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.GroupDesk", b =>
                {
                    b.HasBaseType("Domain.Entities.Desk");

                    b.HasDiscriminator().HasValue("GroupDesk");
                });

            modelBuilder.Entity("Domain.Entities.SingleDesk", b =>
                {
                    b.HasBaseType("Domain.Entities.Desk");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("SingleDesk");
                });

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.HasOne("Domain.Entities.Library", "Library")
                        .WithMany("Blocks")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lnk_Library_Block");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Domain.Entities.Desk", b =>
                {
                    b.HasOne("Domain.Entities.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Floor", "Floor")
                        .WithMany("Desks")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lnk_Floor_Desk");

                    b.HasOne("Domain.Entities.Reservation", null)
                        .WithMany("Desks")
                        .HasForeignKey("ReservationId");

                    b.HasOne("Domain.Entities.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");

                    b.Navigation("Floor");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.Entities.Floor", b =>
                {
                    b.HasOne("Domain.Entities.Block", "Block")
                        .WithMany("Floors")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lnk_Block_Floor");

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Domain.Entities.Library", b =>
                {
                    b.HasOne("Domain.Entities.University", "University")
                        .WithMany("Libraries")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lnk_University_Library");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.GroupDesk", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupDeskId");

                    b.HasOne("Domain.Entities.Reservation", "Reservation")
                        .WithMany("Users")
                        .HasForeignKey("ReservationId")
                        .HasConstraintName("lnk_Reservation_User");

                    b.HasOne("Domain.Entities.University", "University")
                        .WithMany("Users")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("lnk_User_University");

                    b.Navigation("Reservation");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Domain.Entities.Block", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("Domain.Entities.Floor", b =>
                {
                    b.Navigation("Desks");
                });

            modelBuilder.Entity("Domain.Entities.Library", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("Domain.Entities.Reservation", b =>
                {
                    b.Navigation("Desks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.University", b =>
                {
                    b.Navigation("Libraries");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.GroupDesk", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
